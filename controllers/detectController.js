const { GoogleGenerativeAI } = require("@google/generative-ai");

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// Model configuration with fallback
const PRIMARY_MODEL = 'gemini-2.0-flash-exp';
const FALLBACK_MODEL = 'gemini-1.5-flash';

// Helper function to get Gemini model with fallback
async function getGeminiModel(preferPrimary = true) {
    try {
        if (preferPrimary) {
            console.log(`[MODEL] Attempting to use primary model: ${PRIMARY_MODEL}`);
            return genAI.getGenerativeModel({ model: PRIMARY_MODEL });
        } else {
            console.log(`[MODEL] Using fallback model: ${FALLBACK_MODEL}`);
            return genAI.getGenerativeModel({ model: FALLBACK_MODEL });
        }
    } catch (err) {
        console.log(`[MODEL] Error getting model, using fallback: ${err.message}`);
        return genAI.getGenerativeModel({ model: FALLBACK_MODEL });
    }
}

exports.detectAIText = async (req, res) => {
    const { text } = req.body;
    if (!text) return res.status(400).json({ error: "Text is required" });

    let model;
    let usingPrimary = true;

    try {
        model = await getGeminiModel(true);

        const prompt = `
You are an AI detector. I will give you a piece of text. 
Estimate how much of it is likely generated by an AI like ChatGPT, Gemini, etc.
Just return a number between 0 to 100. No explanation.

Text:
"""${text}"""
`;

        const result = await model.generateContent(prompt);
        const response = await result.response.text();

        const percentage = parseInt(response.match(/\d+/)?.[0] || "0", 10);

        console.log(`[AI-DETECT] Analysis complete using ${usingPrimary ? 'primary' : 'fallback'} model: ${percentage}%`);

        res.json({
            textPreview: text.slice(0, 100) + "...",
            aiLikelihoodPercent: percentage
        });
    } catch (err) {
        console.error('[AI-DETECT-ERROR] Primary model failed:', err.message);
        
        // Try fallback model if primary failed
        if (usingPrimary) {
            console.log('[AI-DETECT-FALLBACK] Retrying with fallback model...');
            try {
                usingPrimary = false;
                model = await getGeminiModel(false);
                
                const prompt = `
You are an AI detector. I will give you a piece of text. 
Estimate how much of it is likely generated by an AI like ChatGPT, Gemini, etc.
Just return a number between 0 to 100. No explanation.

Text:
"""${text}"""
`;

                const result = await model.generateContent(prompt);
                const response = await result.response.text();

                const percentage = parseInt(response.match(/\d+/)?.[0] || "0", 10);

                console.log(`[AI-DETECT] Analysis complete using fallback model: ${percentage}%`);

                res.json({
                    textPreview: text.slice(0, 100) + "...",
                    aiLikelihoodPercent: percentage
                });
            } catch (fallbackErr) {
                console.error('[AI-DETECT-FALLBACK-ERROR] Fallback also failed:', fallbackErr.message);
                res.status(500).json({ error: "Both primary and fallback AI detection models failed: " + err.message });
            }
        } else {
            res.status(500).json({ error: "Gemini API call failed: " + err.message });
        }
    }
};